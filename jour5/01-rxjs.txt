rxjs => librairie Google  => https://rxjs.dev/ 
basé sur le design pattern Observer 

Ecouter quand une source de données est modifiée

ajax => modifier les données => mettre à jour le DOM 
ajax => modifier les données <= mettre à jour le DOM 

Ecouter la modification des données ( source de données )

1 Observable => (source de données que l'on veut écouter)
2 Observer => la source de données 

3 s'inscrire à l'observable ( subscrire() ) déclencher la récupération de données 
4 arrêter d'écouter l'observable ( unsubscribe( )) stopper l'écoute de modification des données 

ng g c jour5/obs1

// créer un nouveau composant obs3 

// utiliser la librairie rxjs pour créer une source de données observable 

// émettre 3 valeurs 
// { id : 1 , titre : "article 1" , contenu = "lorem ipsum"}
// { id : 2 , titre : "article 2" , contenu = "lorem ipsum"}
// { id : 3 , titre : "article 3" , contenu = "lorem ipsum"}

// lors de l'initialisation du composant afficher dans la vue le html suivant en utilisant la source de données observable 

<div>
    <article>
        <h3>article 1</h3>
        <p>lorem ipsum</p>
    </article>
   <article>
        <h3>article 1</h3>
        <p>lorem ipsum</p>
    </article>
    <article>
        <h3>article 3</h3>
        <p>lorem ipsum</p>
    </article>
<div>



new Observable( observer => {
    observer.next(1)
    observer.next(2)
    observer.next(3)
})


of( [ 1,2,3 ] )
from ( [ 1,2,3 ] )

timer( )
fromEvent( )
toPromise( )

// rxjs  récupérer un flux de données => transformer via la fonction .pipe()


placer entre Observable -  pipe( opérateur , opérateur )   - souscription

// transformer le flux de données reçu avant de s'abonner et de l'afficher à l'écran 

// ng 


// https://www.learnrxjs.io/learn-rxjs/operators

// créer un nouveau composant obs6 

// créer une source observable qui émettre ces valeurs 1 par 1 => from 
[
// { id : 1 , titre : "article 1" , contenu = "lorem ipsum"}
// { id : 2 , titre : "article 2" , contenu = "lorem ipsum"}
// { id : 3 , titre : "article 3" , contenu = "lorem ipsum"}
]

utiliser l'opérateur pipe(  map( ) ) 

pour chaque élément ajouter un nouvelle propriété dte : "01/10/2021"

// afficher dans le composant 
<ul>
    <li> article 1 -  01/10/2021</li>
    <li> article 2 -  01/10/2021</li>
    <li> article 3 -  01/10/2021</li>
</ul>

of([1,2,3])
of([4,5,6])

merge( of([1,2,3]) , of([4,5,6]) )

